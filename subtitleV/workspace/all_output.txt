Based on the requirements, the following classes, functions, and methods will be necessary:

Classes:
- Subtitle: Represents a subtitle object with its text and timing information.
- Translator: Handles the translation of subtitles to different languages.
- AudioGenerator: Handles the generation of new audio from translated subtitles.
- SoundProcessor: Handles the processing of sound effects and ambient music in the movie.

Functions:
- sync_subtitles: Syncs the subtitles to the movie using a machine learning algorithm.
- translate_subtitles: Translates the subtitles to different languages using the Translator class.
- generate_audio: Generates new audio from translated subtitles using the AudioGenerator class.
- process_sound: Processes sound effects and ambient music in the movie using the SoundProcessor class.

Methods:
- Subtitle.get_text: Returns the text of the subtitle.
- Subtitle.get_timing: Returns the timing information of the subtitle.
- Translator.translate: Translates the subtitle to a specified language.
- AudioGenerator.generate_audio: Generates new audio from translated subtitles.
- SoundProcessor.process_sound: Processes sound effects and ambient music in the movie.

The project will consist of the following files:

1. main.py - The entry point of the program.

```python
import sync
import translate
import generate
import process

def main():
    # Sync subtitles to the movie
    synced_subtitles = sync.sync_subtitles()

    # Translate subtitles to different languages
    translated_subtitles = translate.translate_subtitles(synced_subtitles)

    # Generate new audio from translated subtitles
    new_audio = generate.generate_audio(translated_subtitles)

    # Process sound effects and ambient music in the movie
    processed_audio = process.process_sound(new_audio)

    # Save the new audio to a file
    processed_audio.save("new_audio.mp3")

if __name__ == "__main__":
    main()
```

2. sync.py - Handles syncing the subtitles to the movie.

```python
class Subtitle:
    def __init__(self, text, timing):
        self.text = text
        self.timing = timing

    def get_text(self):
        return self.text

    def get_timing(self):
        return self.timing

def sync_subtitles():
    # TODO: Implement syncing algorithm
    synced_subtitles = [Subtitle("Hello", "00:00:01.000 --> 00:00:03.000"), Subtitle("World", "00:00:04.000 --> 00:00:06.000")]
    return synced_subtitles
```

3. translate.py - Handles translating the subtitles to different languages.

```python
class Translator:
    def __init__(self, languages):
        self.languages = languages

    def translate(self, subtitle, language):
        # TODO: Implement translation algorithm
        translated_text = "Translated text"
        return Subtitle(translated_text, subtitle.get_timing())

def translate_subtitles(subtitles):
    languages = ["en", "es", "fr"] # Example languages
    translator = Translator(languages)
    translated_subtitles = []

    for subtitle in subtitles:
        for language in languages:
            translated_subtitle = translator.translate(subtitle, language)
            translated_subtitles.append(translated_subtitle)

    return translated_subtitles
```

4. generate.py - Handles generating new audio from translated subtitles.

```python
class AudioGenerator:
    def __init__(self, voice):
        self.voice = voice

    def generate_audio(self, subtitle):
        # TODO: Implement text-to-voice algorithm
        audio = "Generated audio"
        return audio

def generate_audio(subtitles):
    voice = "en-US" # Example voice
    audio_generator = AudioGenerator(voice)
    new_audio = []

    for subtitle in subtitles:
        audio = audio_generator.generate_audio(subtitle)
        new_audio.append((audio, subtitle.get_timing()))

    return new_audio
```

5. process.py - Handles processing sound effects and ambient music in the movie.

```python
class SoundProcessor:
    def __init__(self, sound_effects, ambient_music):
        self.sound_effects = sound_effects
        self.ambient_music = ambient_music

    def process_sound(self, audio):
        # TODO: Implement sound processing algorithm
        processed_audio = "Processed audio"
        return processed_audio

def process_sound(audio):
    sound_effects = "sound_effects.wav" # Example sound effects file
    ambient_music = "ambient_music.wav" # Example ambient music file
    sound_processor = SoundProcessor(sound_effects, ambient_music)
    processed_audio = sound_processor.process_sound(audio)
    return processed_audio
```

6. requirements.txt - Lists the required packages for the project.

```
dataclasses
pytest
```

Note: The code above is just an example implementation and may not be fully functional. It is intended to provide an idea of how the project can be structured.
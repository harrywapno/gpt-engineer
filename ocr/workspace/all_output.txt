Based on the requirements, here are the core classes, functions, and methods that will be necessary:

Classes:
- ImageProcessor: A class that will handle the processing of images and conversion to plain text files.

Functions:
- process_images: A function that will take a folder path as input, process all images in the folder, and output plain text files with the same name and location as the original images.

Methods:
- __init__: A method that will initialize the ImageProcessor class and set any necessary parameters.
- process_image: A method that will take an image file path as input, process the image, and output a plain text file with the same name and location as the original image.

Here is the code for the necessary files:

**requirements.txt**
```
numpy
opencv-python
pytesseract
```

**image_processor.py**
```python
import os
import cv2
import numpy as np
import pytesseract


class ImageProcessor:
    def __init__(self, lang='eng'):
        self.lang = lang

    def process_image(self, image_path):
        # Load image
        image = cv2.imread(image_path)

        # Preprocess image
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        gray = cv2.medianBlur(gray, 3)
        gray = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]

        # Perform OCR
        text = pytesseract.image_to_string(gray, lang=self.lang)

        # Save text to file
        text_path = os.path.splitext(image_path)[0] + '.txt'
        with open(text_path, 'w') as f:
            f.write(text)

    def process_images(self, folder_path):
        # Get list of image files in folder
        image_files = [os.path.join(folder_path, f) for f in os.listdir(folder_path) if
                       os.path.isfile(os.path.join(folder_path, f)) and f.lower().endswith(('.png', '.jpg', '.jpeg'))]

        # Process each image
        for image_file in image_files:
            self.process_image(image_file)
```

**main.py**
```python
from image_processor import ImageProcessor


if __name__ == '__main__':
    # Initialize image processor
    image_processor = ImageProcessor()

    # Process images in folder
    folder_path = '/path/to/folder'
    image_processor.process_images(folder_path)
```

In this implementation, we use the OpenCV library for image processing and the pytesseract library for OCR. The ImageProcessor class has two methods: process_image and process_images. The process_image method takes an image file path as input, processes the image, and outputs a plain text file with the same name and location as the original image. The process_images method takes a folder path as input, processes all images in the folder, and outputs plain text files with the same name and location as the original images.

The main.py file is the entry point for the program and initializes the ImageProcessor class with default parameters. It then calls the process_images method with the folder path as input.
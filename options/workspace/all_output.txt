Based on the requirements, the following core classes, functions, and methods will be necessary:

Classes:
- OptionChain: Represents the option chain of a specific equity, containing a list of OptionContracts.
- OptionContract: Represents a specific option contract, containing information such as the strike price, expiration date, and option type (call or put).
- Trade: Represents a trade made by the user, containing information such as the option contract, trade type (buy or sell), and trade amount.

Functions:
- extract_option_chains(): Extracts option chains of all equities in the NYSE.
- find_arbitrage_trades(): Uses optimization techniques to find trades that are in arbitrage.
- recommend_trades(): Uses machine learning techniques to recommend trades to the user.
- update_recommendations(): Continuously updates the recommended trades every fifteen minutes.

Methods:
- OptionChain.get_best_trade(): Returns the best trade for the given option chain.
- OptionChain.get_profit(): Calculates the profit for the given option chain.
- OptionContract.get_price(): Calculates the price of the option contract.
- Trade.execute_trade(): Executes the trade and updates the user's portfolio.

The backend will be written in Python and will use a lightweight and flexible database. The frontend will be accessible to the public and will be written in lightweight, public programming languages such as Julia, Python, or C#. The online platform will comply with all privacy laws and will have basic authentication and security measures in place.

Here is an example file structure for the backend:

```
option_trading/
├── app.py
├── database.py
├── models/
│   ├── option_chain.py
│   ├── option_contract.py
│   └── trade.py
├── optimization/
│   ├── linear.py
│   ├── non_linear.py
│   ├── gaussian.py
│   ├── non_gaussian.py
│   ├── parametric.py
│   └── non_parametric.py
├── machine_learning/
│   ├── recommend_trades.py
│   └── update_recommendations.py
└── tests/
    ├── test_option_chain.py
    ├── test_option_contract.py
    ├── test_trade.py
    ├── test_linear.py
    ├── test_non_linear.py
    ├── test_gaussian.py
    ├── test_non_gaussian.py
    ├── test_parametric.py
    ├── test_non_parametric.py
    ├── test_recommend_trades.py
    └── test_update_recommendations.py
```

Here is an example implementation of the entrypoint file, `app.py`:

```python
from models.option_chain import OptionChain
from optimization.linear import LinearOptimization
from machine_learning.recommend_trades import recommend_trades
from machine_learning.update_recommendations import update_recommendations

def extract_option_chains():
    # TODO: Implement function to extract option chains of all equities in the NYSE
    pass

def find_arbitrage_trades():
    # TODO: Implement function to find trades that are in arbitrage using optimization techniques
    pass

if __name__ == '__main__':
    option_chains = extract_option_chains()
    for option_chain in option_chains:
        linear_optimization = LinearOptimization(option_chain)
        linear_optimization.optimize()
        best_trade = option_chain.get_best_trade()
        option_chain.get_profit()
        recommend_trades(option_chain)
    update_recommendations()
```

Here is an example implementation of the `OptionChain` class, `option_chain.py`:

```python
from typing import List
from models.option_contract import OptionContract

class OptionChain:
    def __init__(self, equity: str, option_contracts: List[OptionContract]):
        self.equity = equity
        self.option_contracts = option_contracts

    def get_best_trade(self):
        # TODO: Implement function to get the best trade for the given option chain
        pass

    def get_profit(self):
        # TODO: Implement function to calculate the profit for the given option chain
        pass
```

Here is an example implementation of the `OptionContract` class, `option_contract.py`:

```python
from datetime import datetime

class OptionContract:
    def __init__(self, strike_price: float, expiration_date: datetime, option_type: str):
        self.strike_price = strike_price
        self.expiration_date = expiration_date
        self.option_type = option_type

    def get_price(self):
        # TODO: Implement function to calculate the price of the option contract
        pass
```

Here is an example implementation of the `Trade` class, `trade.py`:

```python
from models.option_contract import OptionContract

class Trade:
    def __init__(self, option_contract: OptionContract, trade_type: str, trade_amount: int):
        self.option_contract = option_contract
        self.trade_type = trade_type
        self.trade_amount = trade_amount

    def execute_trade(self):
        # TODO: Implement function to execute the trade and update the user's portfolio
        pass
```

Here is an example implementation of the `LinearOptimization` class, `linear.py`:

```python
from models.option_chain import OptionChain

class LinearOptimization:
    def __init__(self, option_chain: OptionChain):
        self.option_chain = option_chain

    def optimize(self):
        # TODO: Implement function to optimize the option chain using linear optimization
        pass
```

Here is an example implementation of the `recommend_trades` function, `recommend_trades.py`:

```python
from models.option_chain import OptionChain

def recommend_trades(option_chain: OptionChain):
    # TODO: Implement function to recommend trades to the user using machine learning techniques
    pass
```

Here is an example implementation of the `update_recommendations` function, `update_recommendations.py`:

```python
def update_recommendations():
    # TODO: Implement function to continuously update the recommended trades every fifteen minutes
    pass
```

Here is an example implementation of the `database` module, `database.py`:

```python
import sqlite3

def connect():
    conn = sqlite3.connect('option_trading.db')
    return conn

def create_tables():
    conn = connect()
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS option_chains
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  equity TEXT NOT NULL)''')
    c.execute('''CREATE TABLE IF NOT EXISTS option_contracts
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  option_chain_id INTEGER NOT NULL,
                  strike_price REAL NOT NULL,
                  expiration_date TEXT NOT NULL,
                  option_type TEXT NOT NULL,
                  FOREIGN KEY (option_chain_id) REFERENCES option_chains(id))''')
    c.execute('''CREATE TABLE IF NOT EXISTS trades
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  option_contract_id INTEGER NOT NULL,
                  trade_type TEXT NOT NULL,
                  trade_amount INTEGER NOT NULL,
                  FOREIGN KEY (option_contract_id) REFERENCES option_contracts(id))''')
    conn.commit()
    conn.close()
```

Here is an example implementation of the `test_option_chain` module, `test_option_chain.py`:

```python
import pytest
from models.option_chain import OptionChain
from models.option_contract import OptionContract

def test_get_best_trade():
    option_contracts = [OptionContract(100, '2022-01-01', 'call'),
                        OptionContract(110, '2022-01-01', 'call'),
                        OptionContract(120, '2022-01-01', 'call')]
    option_chain = OptionChain('AAPL', option_contracts)
    best_trade = option_chain.get_best_trade()
    assert best_trade.option_contract.strike_price == 100
    assert best_trade.trade_type == 'buy'
    assert best_trade.trade_amount == 1

def test_get_profit():
    option_contracts = [OptionContract(100, '2022-01-01', 'call'),
                        OptionContract(110, '2022-01-01', 'call'),
                        OptionContract(120, '2022-01-01', 'call')]
    option_chain = OptionChain('AAPL', option_contracts)
    profit = option_chain.get_profit()
    assert profit == 100
```

Here is an example implementation of the `requirements.txt` file:

```
pytest==6.2.4
dataclasses==0.8
```